#!/usr/bin/env node
/* eslint-disable no-console */

async function run(param, options) {
    const cds = require('@sap/cds')
    const { migrate } = require('../lib/migration/migration')

    async function cds_mtx_migrate(tenants, dir, dry) {
        if (!_hasMtEnv()) _handleError(`cds-mtx-migrate operation can only be run inside a multitenant application environment using @sap/cds-mtxs.`)
        if (!tenants) _handleError(`Please provide tenant(s): cds-mtx-migrate <tenant>[,<tenant>]`)

        const tenantList = _splitTenants(tenants)

        await cds.connect.to('db')
        await cds.serve([
            '@sap/cds/srv/mtx',
            '@sap/cds-mtxs/srv/deployment-service',
            '@sap/cds-mtxs/srv/model-provider',
            '@sap/cds-mtxs/srv/extensibility-service'
        ])
        await cds.emit('served')

        const migratedTenants = await migrate(tenantList, dir, dry)
        for (t of migratedTenants.connectedTenants) await cds.db.disconnect(t)
        await cds.db.disconnect()

        migratedTenants.logResult()

        // make sure to get result != 0 so that potential followup scripts know of problems
        if (migratedTenants.hasError) process.exit(1)
    }

    // check for application environment
    function _hasMtEnv() {
        return cds.requires.multitenancy
    }

    function _handleError(message) {
        console.log(message)
        process.exit(1)
    }

    function _splitTenants(tenants) {
        return tenants.split(',')
    }

    await cds_mtx_migrate(param, options?.directory, options?.dry).catch(console.error)
}

if (require.main === module) {
   // Code section that will run only if current file is the entry point.
   // TODO use command line parser to get arguments
   // comma separated list of tenants?
   const [, , tenants, ...options] = process.argv
   const index = options.indexOf('-d')
   const directory = (index > -1) ? options[index + 1] : undefined
   const dry = options.includes('--dry')
   run(tenants, { directory, dry }).catch(console.error)
} else {
    module.exports.run = run
}
